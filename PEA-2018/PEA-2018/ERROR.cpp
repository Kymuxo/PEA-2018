#include "stdafx.h"
#include "ERROR.h"



namespace Error
{
	ERROR errors[ERROR_MAX_ENTRY] =
	{
		ERROR_ENTRY(000, "Недопустимый код ошибки"),
		ERROR_ENTRY(001, "Системный сбой"),
		
		ERROR_ENTRY(100, "Параметр -in должен быть задан"),
		ERROR_ENTRY(105, "Превышена длина входного параметра"),
		
		ERROR_ENTRY(110, "Ошибка при открытии файла с исходным кодом (-in)"),
		ERROR_ENTRY(111, "Ошибка при создании файла кода на ASM (for_out.asm)"),
		ERROR_ENTRY(112, "Ошибка при создании файла протокола (for_log.txt)"),

		ERROR_ENTRY(115, "Ошибка при обработке данных из файла : Слишком длинный строковый литерал"),
		ERROR_ENTRY(116, "Ошибка при обработке данных из файла : Недопустимые символы внутри строки-литерала!"),
		ERROR_ENTRY(117, "Ошибка при обработке данных из файла : незакрытый символ начала строки"),
		ERROR_ENTRY(118, "Ошибка при обработке данных из файла : встречена пустая строка-литерал"),
		ERROR_ENTRY(119, "Ошибка при обработке данных из файла : недопустимый символ в исходном коде"),

		ERROR_ENTRY(300, "Невозможно распознать слово и преобразовать его в лексему"),
		ERROR_ENTRY(311, "Использовано недопустимое количество идентификаторов типа: функция (больше ограничения, см. в документацию)"),
		ERROR_ENTRY(310, "Неуспешная попытка записи лексемы в таблицу лексем - таблица лексем переполнена!"),
		ERROR_ENTRY(312, "Использовано недопустимое количество идентификаторов типа: литерал (больше ограничения, см. в документацию)"),
		ERROR_ENTRY(313, "Использовано недопустимое количество идентификаторов типа: переменная (больше ограничения, см. в документацию)"),
		ERROR_ENTRY(314, "Использовано недопустимое количество идентификаторов типа: параметр (больше ограничения, см. в документацию)"),

		ERROR_ENTRY(401, "Семантический анализ: Использована необъявленная переменная либо необъявленная функция!"),
		ERROR_ENTRY(402, "Семантический анализ: Превышено количество параметров в функции"),
		ERROR_ENTRY(403, "Семантический анализ: Несоответствие типов данных, передаваемых в функцию"),
		ERROR_ENTRY(404, "Семантический анализ: Несоответствие количества параметров, передаваемых в функцию"),
		ERROR_ENTRY(405, "Семантический анализ: Повторно объявленная переменная либо совпадение имени функции с именем переменной!"),
		ERROR_ENTRY(406, "Семантический анализ: Недопустимое значение для литерала!"),
		ERROR_ENTRY(407, "Семантический анализ: Тип возвращаемого значения функции не совпадает с объявленным!"),
		ERROR_ENTRY(409, "Семантический анализ: Дублирование имен функций!"),
		ERROR_ENTRY(410, "Семантический анализ: Попытка использования арифметической операции для строк! Используйте функции стандартной библиотеки"),
		ERROR_ENTRY(411, "Семантический анализ: Использование зарезервированного слова, обозначающего имя стандартной функции"),
		ERROR_ENTRY(413, "Семантический анализ: Несоответствие типов данных в выражении!"),
		ERROR_ENTRY(414, "Семантический анализ: Попытка использовать рекурсию!"),

		ERROR_ENTRY(600, "Синтаксический анализ: Неверная организация программы"),
		ERROR_ENTRY(601, "Синтаксический анализ: Ошибка в выражениях внутри тела функции"),
		ERROR_ENTRY(602, "Синтаксический анализ: Ошибка в параметрах функции"),
		ERROR_ENTRY(603, "Синтаксический анализ: Ошибка в выражении (например, число*число/литерал)"),
		ERROR_ENTRY(604, "Синтаксический анализ: Ошибка в передаче аргументов в функцию, например, (, a)"),
		ERROR_ENTRY(605, "Синтаксический анализ: Ошибка в возвращаемом значении"),
		ERROR_ENTRY(610, "Синтаксический анализ: Ошибка на этапе работы синтаксического анализатора!"),

		ERROR_ENTRY(ERROR_MAX_ENTRY,"END_FLAG")
	};

	ERROR geterror(int get_id = -1)													// возврат номера ошибки
	{
		if (get_id > 0 && get_id < ERROR_MAX_ENTRY)									//	проверка номера ошибки
		{
			for (int i = 0; errors[i].id != ERROR_MAX_ENTRY; i++)
				if (errors[i].id == get_id)
				{
					return errors[i];
				}
		}
		return errors[0];
	}

	ERROR geterrorin(int get_id = -1, int line = -1, std::string id_errors = "")	//	возврат ошибки с описанием
	{
		if (get_id > 0 && get_id < ERROR_MAX_ENTRY)									//	проверка номера ошибки
		{
			for (int i = 0; i < ERROR_MAX_ENTRY; i++)
				if (errors[i].id == get_id)
				{
					errors[i].line = line;
					errors[i].id_error = id_errors;
					return errors[i];
				}
		}
		return errors[0];
	}
}